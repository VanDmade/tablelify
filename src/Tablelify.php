<?php

namespace VanDmade\Tablelify;
use Exception;

class Tablelify
{

    /**************************************************************************\
     * Executes the entire library of Tablelify.
     * 
     * NOTE: All static methods within this class can be used separately in
     *    order to append logic or replace Tablelify functionality as needed.
     * 
     * @param object $query Eloquent query object
     * @param array $parameters List of variables used to generate / parse the data
     * @param array $searchColumns List of database columns that are to be searched
     * 
     * @return array The default response of the Tablelify class 
    \**************************************************************************/
    public static function run($query, $parameters, $searchColumns = [])
    {
        $parameters = self::cleanParameters($parameters);
        try {
            $table = $query->getModel()->getTable();
            $query = $query->distinct($table.'.id');
        } catch (Exception $error) {}
        // Appends the search information and calculates the totals / filtered totals
        list($total, $filtered, $query) = self::create($query, $parameters, $searchColumns);
        // Sorts the results
        $query = self::sort($query, $parameters['columns'] ?? $parameters['column'], $parameters['direction']);
        // Executes the query and limits the information based on the limit/offset
        list($data, $limit, $offset) = self::execute($query, $parameters['size'], $parameters['page']);
        // Creates the generic response
        return self::response(
            $data,
            $parameters['size'],
            $parameters['page'],
            $parameters['search'],
            $total,
            $filtered
        );
    }

    /**************************************************************************\
     * Counts and filters the query results
     * 
     * @param object $query Eloquent query object
     * @param string $parameters List of variables used to generate / parse the data
     * @param array $searchColumns List of database columns that are to be searched
     * 
     * @return array The total and filtered total of data within the database.
     *   This array also contains the eloquent query object.
    \**************************************************************************/
    public static function create($query, $parameters, $searchColumns = [])
    {
        $search = $parameters['search'] ?? '';
        // Total rows prior to the search value being used
        $total = $query->count();
        $query = $query->where(function($query) use ($search, $searchColumns) {
                // Makes 100% sure the request has sent in the search parameters
                if (!is_null($search)) {
                    // Iterates through the columns that the developer wants to search through
                    foreach ($searchColumns as $i => $column) {
                        $query->orWhere($column, 'LIKE', $search);
                    }
                }
            });
        // Total rows after the search value is sued
        $filteredTotal = $query->count();
        if (isset($parameters['additional']['group_by'])) {
            $query = $query->groupBy($parameters['additional']['group_by']);
        }
        /* Sets up the query and returns the query for the user to run additional
         * functionality on it, or execute it themselves */
        return [$total, $filteredTotal, $query];
    }

    /**************************************************************************\
     * Sorts the query's results
     * 
     * @param object $query Eloquent query object
     * @param array|string $columns Singular item OR
     *    List of columns to be sorted by a single direction OR
     *    Associative array structured with two key/value combinations of `column` AND `direction`
     * @param string $direction Order direction of the results, asc|desc
     * 
     * @return array The list of data that is generated by the Tablelify class
    \**************************************************************************/
    public static function sort($query, $columns, $direction = 'asc')
    {
        // If there is no columns, there is no reason to sort
        if (is_null($columns) || empty($columns)) {
            if (is_null(config('tablelify.default.order_by'))) {
                return $query;
            }
            // Depending on the configuration, it can default all responses
            return $query->orderBy(
                config('tablelify.default.order_by'),
                config('tablelify.default.order_direction', 'asc')
            );
        }
        $columns = is_array($columns) ? $columns : [$columns];
        // Allows for multiple columns to be ordered in a single direction
        foreach ($columns as $i => $column) {
            // Checks to see if the columns sent contain a direction as well within that array
            if (isset($column['direction'])) {
                $query->orderBy($column['column'], $column['direction']);
            } else {
                $query = $query->orderBy($column, $direction ?? 'asc');
            }
        }
        return $query;
    }

    /**************************************************************************\
     * Executes the query and administers the limit as well as offset
     * 
     * @param object $query Eloquent query object
     * @param int $size Maximum return size of data
     * @param int $page Current page number
     * 
     * @return array The list of data that is generated by the Tablelify class
    \**************************************************************************/
    public static function execute($query, $size, $page)
    {
        $limit = $size == 'all' ? null : $size;
        $offset = ($page - 1) * (is_null($limit) ? 0 : $size);
        if (!is_null($limit)) {
            $query = $query->offset($offset)->limit($limit);
        }
        // Executes the query to get the set up data setup and ready to roll
        return [$query->get(), $limit, $offset];
    }

    /**************************************************************************\
     * Generates the default response for the Tablelify class
     * 
     * @param array $data List of data that was parsed by the Library
     * @param int $size Maximum return size of data
     * @param int $page Current page number
     * @param string $search Search string that filtered the results
     * @param int $total Total number of entries within the database. This does
     *    not represent the total number of entries returned
     * @param int $filteredTotal Total number of entries within the database
     *    after the filter has occurred. This does not represent the total
     *    number of filtered entries returned
     * 
     * @return array The default response of the Tablelify class 
    \**************************************************************************/
    public static function response(
        $data,
        $size,
        $page,
        $search,
        $total,
        $filteredTotal = 0
    ) {
        $totalEntriesReturned = sizeof($data);
        /* Calculates the total pages based on the filtered or unfiltered data.
         * IF the size is set to all, the total pages will be set to 1 */
        $totalResults = !is_null($search) ? $filteredTotal : $total;
        $totalPages = $size == 'all' ? 1 : ceil(($totalResults ?? $totalEntriesReturned) / $size);
        // Takes the results and returns the values in the package's default output
        $response = [
            'page' => $page,
            'total_pages' => $totalPages,
            'size' => $size,
            'total' => $total ?? $totalEntriesReturned,
            'data' => $data,
        ];
        if (config('tablelify.page_details', true)) {
            $response = array_merge($response, [
                'next_page' => $totalPages <= $page ? null : ($page + 1),
                'previous_page' => $page == 1 ? null : ($page - 1),
            ]);
        }
        if (config('tablelify.filtered', true)) {
            $response = array_merge($response, [
                'filtered' => !is_null($search) ? true : false,
                'filtered_total' => $filteredTotal ?? $totalEntriesReturned,
            ]);
        }
        return response()->json($response, 200);
    }

    /**************************************************************************\
     * Cleans the list of parameters to be 100% positive the list received
     * contain the needed information for the class to appropriately respond.
     * 
     * @param array $parameters List of variables used to generate / parse the data
     * 
     * @return array A cleaned list of variables that will be used within
     *    the Tablelify library.
    \**************************************************************************/
    public static function cleanParameters($parameters)
    {
        $parameters['page'] = $parameters['page'] ?? 1;
        $parameters['size'] = $parameters['size'] ?? config('tablelify.default.size', 10);
        $parameters['column'] = $parameters['column'] ?? null;
        $parameters['direction'] = $parameters['direction'] ?? (!is_null($parameters['column']) ? 'asc' : null);
        $parameters['search'] = ('%'.trim($parameters['search'], '%').'%') ?? null;
        return $parameters;
    }

    /**************************************************************************\
     * Cleans a request to remove values and keep data consistent
     * 
     * NOTE: Can be used on any request parameters list OR array
     * 
     * @param array $list Array of request variables
     * 
     * @return array A cleaned list of request variables.
    \**************************************************************************/
    public static function cleanRequest($list)
    {
        // Iterates through the parameters to remove unwanted values
        foreach ($list as $key => &$value) {
            // Determines if the recursive functionality needs to occur and clean subarrays
            if (is_array($value)) {
                $value = self::cleanRequest($value);
            } else {
                $value = in_array(strtolower($value), ['null', 'undefined', null]) ? null : $value;
                if ($key != 'search' && !is_null($value)) {
                    // Checks for true / false values to convert to the appropriate values
                    $value = in_array($value, ['true', 1, '1']) || $value === true ? 1 : $value;
                    $value = in_array($value, ['false', 0, '0']) || $value === false ? 0 : $value;
                }
            }
        }
        return $list;
    }

}